#!/usr/bin/env gosh
;; Configuring Gauche-rfc-stringprep
;; Run ./configure (or gosh ./configure) to generate Makefiles.

(use gauche.configure)
(load "configure-compat"
      :paths `(,(sys-dirname (current-load-path)))
      :error-if-not-found #f)

(define (errmsg fmt . args)
  (apply format (current-error-port) fmt args))

;; Here you can define handlers of configure arguments by cf-arg-enable
;; and cf-arg-with.  Note that --with-local is handled implicitly if you use
;; cf-init-gauche-extension.
(cf-arg-with
 'idn
 "  --with-idn=PATH      Use stringprep (libidn) installed under PATH.
")

(cf-arg-enable
 'werror
 "  \
  --enable-werror         Append -Werror option to C compiler
  --disable-werror        Default behavior
")

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init-gauche-extension)

;; Here you can add feature tests and other cf-define's.

(define (required-lib-not-found libname)
  (errmsg "~a not found.\n" libname)
  (exit 1))

(and-let* ([werror (cf-feature-ref 'werror)]
           [(equal? werror "yes")])
  (cf-subst-append 'CFLAGS "-Werror"))

(cf-check-headers
 '("stringprep.h")
 :if-not-found required-lib-not-found)

(cond
 [(cf-package-ref 'idn) =>
  (^p (cf-subst-prepend 'LIBS #"-l~|p|"))]
 [else
  (cf-check-lib
   "idn" "stringprep"
   :if-not-found required-lib-not-found)])

(use file.util)

;; TODO FIXME maybe working ;-)
(cond
 [(cf-check-member
   "Stringprep_profile.table_size"
   :includes '("#include <stringprep.h>\n"))
  (cf-subst 'STRINGPREP_DEPS_H (file->string "stringprep_deps_140.h"))]
 [else
  (cf-subst 'STRINGPREP_DEPS_H (file->string "stringprep_deps_130.h"))])


;; Output
(cf-output-default)

(cf-output "stringprep_deps.h")

;; Local variables:
;; mode: scheme
;; end:
